---
import ButtonNav from './ButtonNav.astro'
---

<header class="w-full h-[80px] fixed top-0 bg-black z-[2] flex items-center">
  <ul class="w-full h-[40px] flex items-center pr-[300px]
  thirdq:pr-[100px]">
    <li class="p-[8px] w-[300px] h-full flex justify-center">
      <ButtonNav>
        <span id="span-button" class="translate-x-[-20px] text-[#AB966F] transition-all duration-500 ease-out">Explorar</sp>
      </ButtonNav>
    </li>
    <li class="flex flex-grow justify-center items-center gap-[80px]
    thirdq:gap-[50px]">
      <a id="navigateEndpoint" class="bg-[#AB966F] bg-opacity-20 rounded-md text-[#AB966F] p-[6px] cursor-pointer hover:underline
      thirdq:p-[3px] thirdq:w-fit" href="#Endpoint">Endpoint</a>
      <a class="bg-[#AB966F] bg-opacity-20 rounded-md text-[#AB966F] p-[6px] cursor-pointer hover:underline
      thirdq:p-[3px] thirdq:w-fit" href="/mock">Prueba Fetching</a>
      <a id="navigateAbout" class="bg-[#AB966F] bg-opacity-20 rounded-md text-[#AB966F] p-[6px] cursor-pointer hover:underline
      thirdq:p-[3px] thirdq:w-fit" href="#About">Sobre FromSoftware</a>
    </li>
  </ul>
</header>

<script>
  let pathname = window.location.pathname
  const navigateEndpoint = document.getElementById('navigateEndpoint')
  const navigateAbout = document.getElementById('navigateAbout')

  let fromMock = localStorage.getItem('fromMock')
  if(fromMock === null || fromMock === undefined) {
    fromMock = 'false'
    localStorage.setItem('fromMock', fromMock)
  }
  let fromGlossary = localStorage.getItem('fromGlossary')
  if (fromGlossary === null || fromMock === undefined) {
    fromGlossary = 'false'
    localStorage.setItem('fromGlossary', fromGlossary)
  }
  let checkEndpoint = localStorage.getItem('checkEndpoint')
  if(checkEndpoint === null || checkEndpoint === undefined) {
    checkEndpoint = 'false'
    localStorage.setItem('checkEndpoint', checkEndpoint)
  }
  let checkAbout = localStorage.getItem('checkAbout')
  if(checkAbout === null || checkAbout === undefined) {
    checkAbout = 'false'
    localStorage.setItem('checkEndpoint', checkAbout)
  }
  

  const handleTransition = (event, button) => {
    event.preventDefault()
    const targetId = button.getAttribute('href')
    const targetElement = document.querySelector(targetId)
    if (targetElement instanceof HTMLElement) {
      window.scrollTo({ top: targetElement.offsetTop - 80, behavior: 'smooth' })
    }
  }
  navigateEndpoint.addEventListener('click', () => {
    pathname = window.location.pathname
    if (pathname === '/mock') {
      localStorage.setItem('fromMock', 'true')
      localStorage.setItem('checkEndpoint', 'true')
      window.location.href = '/'
    } else if (pathname === '/glossary') {
      localStorage.setItem('fromGlossary', 'true')
      localStorage.setItem('checkEndpoint', 'true')
      window.location.href = '/'
    } else {
      handleTransition(event, navigateEndpoint)
    }
  })
  navigateAbout.addEventListener('click', () => {
    if (pathname === '/mock') {
      localStorage.setItem('fromMock', 'true')
      localStorage.setItem('checkAbout', 'true')
      window.location.href = '/'
    } else if (pathname === '/glossary') {
      localStorage.setItem('fromGlossary', 'true')
      localStorage.setItem('checkAbout', 'true')
      window.location.href = '/'
    } else {
      handleTransition(event, navigateAbout)
    }
  })
  document.addEventListener('DOMContentLoaded', () => {
    if(fromMock === 'true' || fromGlossary === 'true' ) {
      if(checkEndpoint === 'true') {
        handleTransition(event, navigateEndpoint)
      } else if (checkAbout === 'true') {
        handleTransition(event, navigateAbout)
      }
      localStorage.setItem('checkEndpoint', 'false')
      localStorage.setItem('checkAbout', 'false')
      localStorage.setItem('fromMock', 'false')
      localStorage.setItem('fromGlossary', 'false')
    }
  })
</script>